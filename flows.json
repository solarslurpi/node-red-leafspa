[
    {
        "id": "8b70799ce97cf17d",
        "type": "tab",
        "label": "Setup",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4abea758808e56d0",
        "type": "tab",
        "label": "Loop",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d9bacc2cf62aebc4",
        "type": "tab",
        "label": "Playground",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b1f5580f.0b59c8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f5b70e481620d6e",
        "type": "subflow",
        "name": "Sensor Error Check",
        "info": "",
        "category": "",
        "in": [
            {
                "x": -20,
                "y": 80,
                "wires": [
                    {
                        "id": "163335db1cb8164e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1340,
                "y": 40,
                "wires": [
                    {
                        "id": "23104b00346c1d1f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "eb89d693b7773219",
        "type": "subflow",
        "name": "Process Simulation",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "11128d0521cfb4a6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "949923bd437d2864",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "ba872fe6adc0f262",
        "type": "group",
        "z": "8b70799ce97cf17d",
        "name": "Photoresistor lets us know if lights on/off",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a73f97f6deb9c9dc",
            "a78a3ea85ee5da0f",
            "2965aa8cc50c2bcd",
            "5bb9031a4d037509",
            "b01650a105e9d838",
            "a112c1321f7394ca",
            "6a8630aafdf67919",
            "6c6ac30170b8c47d",
            "dcf288668f36caa1",
            "c9e4f1e57a4501c7",
            "f7624c02411cec09",
            "2b135d6da4c867f9",
            "9f98a1ce0fe07b3e",
            "ca2dd1046dede78b",
            "b58b16f52bf976ef",
            "44eb4d7df54d1880",
            "75250e59829d03b9",
            "1dacee984a866e2b",
            "68090ff36fa57771"
        ],
        "x": 54,
        "y": 199,
        "w": 1352,
        "h": 342
    },
    {
        "id": "9dcaa677a0671838",
        "type": "group",
        "z": "4abea758808e56d0",
        "name": "Monitor vpd",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d9310a1d7b219621",
            "8ef94b8292b55d3d",
            "3ac927cfc1291cb6",
            "1c31a3e0e246c4cb",
            "b6e5722ca9b4f48f",
            "f0dde5405daf38ee",
            "d7a7e9f0a6c51f63",
            "2467151ca8fb8c11",
            "04d93dab9d49d747",
            "2d6dc1fd41eb0523",
            "ce419125d4c127e7",
            "2574d57fcafe6b0e",
            "62df9bdc4e1e0168",
            "8f979df0be509094"
        ],
        "x": 134,
        "y": 1059,
        "w": 1412,
        "h": 242
    },
    {
        "id": "6c6d661cc9832c5f",
        "type": "group",
        "z": "4abea758808e56d0",
        "name": "Error Check",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a1627783ce7223c1",
            "7c30e4d020397ddc",
            "7d5fbdaef2f84c21",
            "8e0d8f85df6622d5",
            "c2208a090b9adff5",
            "c5950d95bd02b9d6",
            "891d0e50a401d197",
            "91f04f48495fec01"
        ],
        "x": 134,
        "y": 1319,
        "w": 932,
        "h": 182
    },
    {
        "id": "5cd41cd596d96214",
        "type": "group",
        "z": "4abea758808e56d0",
        "name": "Water as Needed",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7d98a870d540204c",
            "c9674f330c0d14bf",
            "0154006cf7a6ce53",
            "98915e32e0b597e9",
            "7cacead955da0671",
            "94a247bc3827cf77",
            "3e873a2e43dd6886",
            "12607c4eea7517c5",
            "07728359ffb6cb8c",
            "741eb90c1f6ec67f",
            "08432c4ae4642529"
        ],
        "x": 134,
        "y": 1839,
        "w": 1492,
        "h": 182
    },
    {
        "id": "c46e0f1aa3ade45f",
        "type": "group",
        "z": "8b70799ce97cf17d",
        "name": "Turn maintanence mode ON or OFF",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fd8fe70cf071e64e",
            "dc67024c11b7ddc3",
            "0816a5ae88264cbf",
            "54fb67ba0ef3287b",
            "95cd08fdc45a781f",
            "e7eb39dee445d94c",
            "917cb0c3bbbf7e80",
            "e7c53c6aa8f7bf22",
            "9e00cd6775f7eee4",
            "73e0adc899da21c8",
            "f3424efddcaac61d",
            "e65101b0861003d7",
            "53c4eac6e94ffc2d",
            "da0b31bae02beb36"
        ],
        "x": 104,
        "y": 799,
        "w": 1192,
        "h": 242
    },
    {
        "id": "c1f9dd9005199070",
        "type": "group",
        "z": "4abea758808e56d0",
        "name": "Take Readings from scd30 sensor",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "11e485116eee57f2",
            "109fb15ca23f61de",
            "dfcd0478bf2416e5",
            "73e9b65f7062e826",
            "84278bf54d79cd76",
            "ff1491759ab107b3",
            "35ae8f14df4e6a62",
            "d66cdba9a473ecf7",
            "7369975ab5993df5",
            "32c200af72af8230",
            "1719f5a5a4164309",
            "0673833916e00a97",
            "a1296ba7044ee47f",
            "0afb20ee3d565630",
            "4da3ba0ace62a98e",
            "a281ccd7b48cfc28",
            "c5403bf55494f94b"
        ],
        "x": 154,
        "y": 119,
        "w": 1552,
        "h": 282
    },
    {
        "id": "11670cc3ba018b59",
        "type": "group",
        "z": "4abea758808e56d0",
        "name": "Write readings to influx",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "9164759796c0c04d",
            "962ae9ccf9e5902f",
            "f9a42940ed8f69d9",
            "421f54339678b2ae",
            "dd3f8b083243cab6",
            "5f7d5c4c5e33be7b",
            "43659c9345caee48",
            "59b3a26f8c0ff142",
            "e1377f3696e0121c"
        ],
        "x": 134,
        "y": 579,
        "w": 1192,
        "h": 202
    },
    {
        "id": "2aaa68f68d8fd77c",
        "type": "group",
        "z": "4abea758808e56d0",
        "name": "Adjust CO2 Level",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9d999439c54af0da",
            "d23cb0ed0c018915",
            "8115cdb33c2eb383",
            "09a1997cf283f87c",
            "4a7db3adf19b8993",
            "2b15c635124ac3e4",
            "8ea7ca419625113b",
            "5c0c596782767209",
            "9db1913821a3e731",
            "0a3f95f85eb5341a"
        ],
        "x": 134,
        "y": 819,
        "w": 1492,
        "h": 202
    },
    {
        "id": "bd52ceb7e193caff",
        "type": "influxdb",
        "hostname": "192.168.86.41",
        "port": "8086",
        "protocol": "http",
        "database": "leafspa",
        "name": "leafspa",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "1ea5dfa03b11893e",
        "type": "scd30-config",
        "busNumber": "1"
    },
    {
        "id": "01be24a515700cda",
        "type": "remote-config",
        "name": "Node-RED UI",
        "host": "localhost",
        "protocol": "http",
        "port": "1880",
        "baseurl": "/ui",
        "instancehash": "0izj4blryeyqoha7wpo3jntdituk9kxso6fkdkfuy17m0ns2oont17mt1zqr7zk9",
        "server": "nodered03.remote-red.com",
        "region": "us"
    },
    {
        "id": "3b29ec6d48e8bbfe",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "35870709b5fb5fcf",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "80cd4062.93a5",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "14f7bbb4.c9d2b4",
        "type": "ui_tab",
        "name": "GardenBro",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "20355074b213b777",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "521438b26183dc33",
        "type": "ui_group",
        "name": "Home",
        "tab": "35870709b5fb5fcf",
        "order": 1,
        "disp": true,
        "width": 4,
        "collapse": false
    },
    {
        "id": "c45a83a3.d00908",
        "type": "ui_group",
        "name": "PID",
        "tab": "80cd4062.93a5",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "55104359.ae8f1c",
        "type": "ui_group",
        "name": "Heater Setpoints",
        "tab": "14f7bbb4.c9d2b4",
        "order": 4,
        "disp": true,
        "width": "7",
        "collapse": true
    },
    {
        "id": "ae012c4c.e138b",
        "type": "ui_group",
        "name": "Dehumidifier Setpoints",
        "tab": "14f7bbb4.c9d2b4",
        "order": 6,
        "disp": true,
        "width": "7",
        "collapse": true
    },
    {
        "id": "9808fb7a.a5a668",
        "type": "ui_group",
        "name": "VPD",
        "tab": "14f7bbb4.c9d2b4",
        "order": 3,
        "disp": false,
        "width": "7",
        "collapse": false
    },
    {
        "id": "7deea9a6.d96288",
        "type": "ui_group",
        "name": "Temperature Monitoring",
        "tab": "14f7bbb4.c9d2b4",
        "order": 2,
        "disp": false,
        "width": "7",
        "collapse": false
    },
    {
        "id": "89978d32.271a5",
        "type": "ui_group",
        "name": "Humidity Monitoring",
        "tab": "14f7bbb4.c9d2b4",
        "order": 1,
        "disp": false,
        "width": "7",
        "collapse": false
    },
    {
        "id": "218993f3.dd413c",
        "type": "ui_group",
        "name": "Exhaust Setpoints",
        "tab": "14f7bbb4.c9d2b4",
        "order": 8,
        "disp": true,
        "width": "7",
        "collapse": true
    },
    {
        "id": "b806f09.05ae81",
        "type": "ui_group",
        "name": "Humidifier Setpoints",
        "tab": "14f7bbb4.c9d2b4",
        "order": 7,
        "disp": true,
        "width": "7",
        "collapse": true
    },
    {
        "id": "7999bcbc.c400c4",
        "type": "ui_group",
        "name": "Lighting",
        "tab": "14f7bbb4.c9d2b4",
        "order": 8,
        "disp": true,
        "width": "7",
        "collapse": true
    },
    {
        "id": "875b2792.d32768",
        "type": "ui_group",
        "name": "Fertigation",
        "tab": "14f7bbb4.c9d2b4",
        "order": 9,
        "disp": true,
        "width": "7",
        "collapse": true
    },
    {
        "id": "09d90076001a5c69",
        "type": "comment",
        "z": "4abea758808e56d0",
        "name": "If Lights are off, the CO2 and Humidifier plugs should be off.",
        "info": "",
        "x": 1380,
        "y": 3160,
        "wires": []
    },
    {
        "id": "2994c65a03819980",
        "type": "comment",
        "z": "8b70799ce97cf17d",
        "name": "References",
        "info": "- doing a `uname -a` on the pi zerow shows the chip to be Armv6 and not Armv7.  This is unfortunate because the \"normal\" Grafana install wants armv7.\n\nI found a website that gave directions for installing Grafana on a pi zero:\n- [Grafana and InfluxDB on a Pi](https://brettbeeson.com.au/grafana-and-influxdb-in-pi-zero-w/)\n- \nAfter install, I did a `sudo apt-get update` and then started the `grafana-server`.\n\nThere are several pages on nodered/tp-link with different commands.  It seems the command set used by this install is at:\n- [tplink github with commands](https://github.com/caseyjhol/node-red-contrib-tplink)",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "a73f97f6deb9c9dc",
        "type": "rpi-gpio in",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Photoresistor",
        "pin": "7",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "68090ff36fa57771"
            ]
        ]
    },
    {
        "id": "a78a3ea85ee5da0f",
        "type": "comment",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Use Photoresistor to see if LED lights on or off",
        "info": "# Switch statement values\n0 = Lights are on.  1 = Lights are off.\n# When Lights turn on\nUse a delay to wait 30 minutes before supplementing CO2 and humidity. This delay is based on reading the plant does not use CO2 in the first 30 minutes.  I decided to start all supplemental environmental factors after 30 minutes based on the CO2 information.  At least it is a way to conserve on the amount of CO2 used.\n# When Lights turn off\nJust in case...\nTurn off the CO2 solenoid, humidifier, or pump in case they are on. None of these need to be on when the lights are off.\n# Send email\nSend an email to let me know when the lights are turned on or off.  The email gives me some piece of mind the system is working correctly.\n",
        "x": 310,
        "y": 260,
        "wires": []
    },
    {
        "id": "2965aa8cc50c2bcd",
        "type": "function",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Send email when Photoresistor detects Lights ON/OFF change",
        "func": "if (msg.payload == 0){\n    msg.payload = \"PR says Lights turned ON\"\n}else {\n    msg.payload = \"PR says Lights turned OFF\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "b01650a105e9d838"
            ]
        ]
    },
    {
        "id": "5bb9031a4d037509",
        "type": "switch",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "LED ON?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 300,
        "wires": [
            [
                "2b135d6da4c867f9",
                "9f98a1ce0fe07b3e"
            ],
            [
                "c9e4f1e57a4501c7",
                "ca2dd1046dede78b",
                "44eb4d7df54d1880",
                "75250e59829d03b9"
            ]
        ]
    },
    {
        "id": "d9310a1d7b219621",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "is vpd in range?",
        "property": "vpd",
        "propertyType": "flow",
        "rules": [
            {
                "t": "btwn",
                "v": "1",
                "vt": "num",
                "v2": "1.5",
                "v2t": "num"
            },
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "1.5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 980,
        "y": 1200,
        "wires": [
            [
                "1c31a3e0e246c4cb"
            ],
            [
                "2467151ca8fb8c11",
                "2d6dc1fd41eb0523"
            ],
            [
                "3ac927cfc1291cb6",
                "8ef94b8292b55d3d"
            ]
        ]
    },
    {
        "id": "8ef94b8292b55d3d",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "need more humidity",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "need more humidity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 1260,
        "wires": [
            [
                "b6e5722ca9b4f48f"
            ]
        ]
    },
    {
        "id": "3ac927cfc1291cb6",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "Turn humidifier on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 1220,
        "wires": [
            [
                "04d93dab9d49d747"
            ]
        ]
    },
    {
        "id": "1c31a3e0e246c4cb",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "Humidity OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Humidity OK",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 1100,
        "wires": [
            [
                "b6e5722ca9b4f48f"
            ]
        ]
    },
    {
        "id": "b6e5722ca9b4f48f",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f0dde5405daf38ee",
        "type": "inject",
        "z": "4abea758808e56d0",
        "d": true,
        "g": "9dcaa677a0671838",
        "name": "check VPD every 5 seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 300,
        "y": 1140,
        "wires": [
            [
                "ce419125d4c127e7"
            ]
        ]
    },
    {
        "id": "d7a7e9f0a6c51f63",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "time to raise humidity?",
        "property": "HUMIDITY_ON",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 780,
        "y": 1200,
        "wires": [
            [
                "d9310a1d7b219621"
            ]
        ]
    },
    {
        "id": "a1627783ce7223c1",
        "type": "inject",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "check every 10 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "7c30e4d020397ddc",
                "7d5fbdaef2f84c21",
                "8e0d8f85df6622d5"
            ]
        ]
    },
    {
        "id": "7c30e4d020397ddc",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "is Humidity way too high?",
        "property": "humidity",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "74",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 1400,
        "wires": [
            [
                "91f04f48495fec01"
            ]
        ]
    },
    {
        "id": "7d5fbdaef2f84c21",
        "type": "function",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "debug info",
        "func": "s = \"**Error Checking on humidity and CO2...CO2: \";\ns = s + global.get(\"CO2\").toFixed(2);\ns = s + \" humidity: \";\ns = s + global.get(\"humidity\").toFixed(2);\n\nnode.warn(s);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "8e0d8f85df6622d5",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "is CO2 way too high?",
        "property": "CO2",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "1300",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 1360,
        "wires": [
            [
                "891d0e50a401d197"
            ]
        ]
    },
    {
        "id": "04d93dab9d49d747",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "humidifier pin",
        "pin": "13",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1450,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2467151ca8fb8c11",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "Turn humidifier off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 1180,
        "wires": [
            [
                "04d93dab9d49d747"
            ]
        ]
    },
    {
        "id": "891d0e50a401d197",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "Turn CO2 off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1360,
        "wires": [
            [
                "c2208a090b9adff5"
            ]
        ]
    },
    {
        "id": "c2208a090b9adff5",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "CO2 pin",
        "pin": "11",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 900,
        "y": 1360,
        "wires": []
    },
    {
        "id": "91f04f48495fec01",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "Turn humidifier off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1400,
        "wires": [
            [
                "c5950d95bd02b9d6"
            ]
        ]
    },
    {
        "id": "c5950d95bd02b9d6",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "g": "6c6d661cc9832c5f",
        "name": "humidifier pin",
        "pin": "13",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 970,
        "y": 1400,
        "wires": []
    },
    {
        "id": "2d6dc1fd41eb0523",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "Humidity high",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Humidity high",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 1140,
        "wires": [
            [
                "b6e5722ca9b4f48f"
            ]
        ]
    },
    {
        "id": "8b438012f876aef4",
        "type": "inject",
        "z": "4abea758808e56d0",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 230,
        "y": 2660,
        "wires": [
            [
                "9f3f59f024e3d4b4"
            ]
        ]
    },
    {
        "id": "236ba205bc5f7a46",
        "type": "inject",
        "z": "4abea758808e56d0",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 220,
        "y": 2720,
        "wires": [
            [
                "9f3f59f024e3d4b4"
            ]
        ]
    },
    {
        "id": "9f3f59f024e3d4b4",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "name": "irrigation pump",
        "pin": "22",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 460,
        "y": 2740,
        "wires": []
    },
    {
        "id": "a87be02a6cd60363",
        "type": "rpi-gpio in",
        "z": "4abea758808e56d0",
        "name": "low water sensor",
        "pin": "16",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "x": 210,
        "y": 2780,
        "wires": [
            [
                "766ff78eaf28c1f7"
            ]
        ]
    },
    {
        "id": "df39fd92d242fcb4",
        "type": "rpi-gpio in",
        "z": "4abea758808e56d0",
        "name": "high water sensor",
        "pin": "18",
        "intype": "tri",
        "debounce": "25",
        "read": false,
        "x": 230,
        "y": 2840,
        "wires": [
            [
                "766ff78eaf28c1f7"
            ]
        ]
    },
    {
        "id": "766ff78eaf28c1f7",
        "type": "debug",
        "z": "4abea758808e56d0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 2800,
        "wires": []
    },
    {
        "id": "a112c1321f7394ca",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Turn CO2 off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "6a8630aafdf67919"
            ]
        ]
    },
    {
        "id": "6a8630aafdf67919",
        "type": "rpi-gpio out",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "CO2 pin",
        "pin": "11",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1220,
        "y": 320,
        "wires": []
    },
    {
        "id": "6c6ac30170b8c47d",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Turn humidifier off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "dcf288668f36caa1"
            ]
        ]
    },
    {
        "id": "dcf288668f36caa1",
        "type": "rpi-gpio out",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "humidifier pin",
        "pin": "13",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1310,
        "y": 360,
        "wires": []
    },
    {
        "id": "c9e4f1e57a4501c7",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Stop humidifier pump",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 400,
        "wires": [
            [
                "f7624c02411cec09"
            ]
        ]
    },
    {
        "id": "f7624c02411cec09",
        "type": "rpi-gpio out",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "humidifier pump",
        "pin": "15",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1100,
        "y": 400,
        "wires": []
    },
    {
        "id": "34247234f0668477",
        "type": "function",
        "z": "7f5b70e481620d6e",
        "name": "Check if we're getting valid readings",
        "func": "\n/* ASSUMPTIONS:\n- Humidity should read at least greater than 30 (percent) and less than or equal to 100.\n- Temperature should read at least greater than 50 (degrees F) and less than 100 degrees F.\n- CO2 level should read at least 350 (ppm) and less than 1800.\n*/\n\n/* I did separate if statements because of the way I was finding\nerrors coming in.  If the I2C interface isn't working, there \nis a different error than if the I2C interface is working but the \nthe sensor is not.\n*/\n if (msg.payload == \"read-measurement\") {\n    node.warn(\"** Error: Check Sensor.  I2C interface is not working...\");\n    msg.payload.good_readings = false;\n    return msg;\n    \n}\n/* The Sensor could be sending bad readings */\n\nif (isNaN(msg.payload.co2Concentration) ){\n    node.warn(\"** ERROR: Check Sensor. Not getting valid readings...\");\n    msg.payload.good_readings = false;\n    \n}else if (msg.payload.relativeHumidity < 30 || msg.payload.relativeHumidity > 100){\n    node.warn(\"** ERROR: Check Sensor. Humidity reading is \"+msg.payload.relativeHumidity);\n    msg.payload.good_readings = false;\n}else if (msg.payload.temperature < 50 || msg.payload.temperature > 90){\n    node.warn(\"** ERROR: Check Sensor. Temperature reading is \"+msg.payload.Temperature);\n    msg.payload.good_readings = false;\n}else if (msg.payload.co2Concentration < 350 || msg.payload.co2Concentration > 1800){\n    node.warn(\"** ERROR: Check Sensor. CO2 level reading is \"+msg.payload.co2Concentration);\n    msg.payload.good_readings = false;\n}\nelse {\n    msg.payload.good_readings = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "3c657af948247c47"
            ]
        ],
        "inputLabels": [
            "Unvalidated Sensor Readings"
        ],
        "outputLabels": [
            "Validated Sensor readings"
        ]
    },
    {
        "id": "3c657af948247c47",
        "type": "switch",
        "z": "7f5b70e481620d6e",
        "name": "true if we are getting readings",
        "property": "payload.good_readings",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 100,
        "wires": [
            [
                "96ad718c50324646"
            ],
            [
                "232789a045a98448"
            ]
        ]
    },
    {
        "id": "23104b00346c1d1f",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "set sensor_working to true",
        "rules": [
            {
                "t": "set",
                "p": "sensor_working",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "232789a045a98448",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "add 1 to n_bad_readings",
        "rules": [
            {
                "t": "set",
                "p": "n_bad_readings",
                "pt": "flow",
                "to": "$flowContext(\"n_bad_readings\")+1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 160,
        "wires": [
            [
                "7c2d03e0b4809e9e",
                "5c0e2f583f51111c"
            ]
        ]
    },
    {
        "id": "7c2d03e0b4809e9e",
        "type": "switch",
        "z": "7f5b70e481620d6e",
        "name": "n_bad_readings > 3?",
        "property": "n_bad_readings",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1220,
        "y": 100,
        "wires": [
            [
                "5746a4c7a8a82e23",
                "789c646fef2264da",
                "93ca8f7778e3b6e7",
                "45ba2da9f8f92240"
            ]
        ]
    },
    {
        "id": "65635cb9b4bd5851",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "msg = Sensor not working",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sensor is not working!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 160,
        "wires": [
            [
                "932ab0db48ba4e93"
            ]
        ]
    },
    {
        "id": "932ab0db48ba4e93",
        "type": "debug",
        "z": "7f5b70e481620d6e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 100,
        "wires": []
    },
    {
        "id": "ce419125d4c127e7",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "is sensor working?",
        "property": "sensor_working",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 1200,
        "wires": [
            [
                "62df9bdc4e1e0168",
                "8f979df0be509094"
            ]
        ]
    },
    {
        "id": "5c0e2f583f51111c",
        "type": "function",
        "z": "7f5b70e481620d6e",
        "name": "print n_bad_readings",
        "func": "msg.payload = \"number of bad readings: \" + flow.get(\"n_bad_readings\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 200,
        "wires": [
            [
                "4408918677e3640b"
            ]
        ]
    },
    {
        "id": "4408918677e3640b",
        "type": "debug",
        "z": "7f5b70e481620d6e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 280,
        "wires": []
    },
    {
        "id": "96ad718c50324646",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "set n_bad_readings to 0",
        "rules": [
            {
                "t": "set",
                "p": "n_bad_readings",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 40,
        "wires": [
            [
                "23104b00346c1d1f"
            ]
        ]
    },
    {
        "id": "5746a4c7a8a82e23",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "set sensor_working to false",
        "rules": [
            {
                "t": "set",
                "p": "sensor_working",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2b135d6da4c867f9",
        "type": "delay",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 890,
        "y": 280,
        "wires": [
            [
                "b58b16f52bf976ef"
            ]
        ]
    },
    {
        "id": "fe7c583743d4b331",
        "type": "function",
        "z": "4abea758808e56d0",
        "name": "calc VPD",
        "func": "var air_T = global.get(\"temperature\");\n/* Assume leaf temp is 2 degrees F less */\nvar leaf_T = air_T - 2;\nvar RH = global.get(\"humidity\");\n\n\nleaf_vpd = 3.386*(Math.exp(17.863-9621/(leaf_T+460))-((RH/100)*Math.exp(17.863-9621/(air_T+460))));\nmsg.payload = Number(leaf_vpd.toFixed(2));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3060,
        "wires": [
            [
                "0d71a6f8205b4144"
            ]
        ]
    },
    {
        "id": "7a9e61c83e28be02",
        "type": "inject",
        "z": "4abea758808e56d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 3080,
        "wires": [
            [
                "fe7c583743d4b331"
            ]
        ]
    },
    {
        "id": "0d71a6f8205b4144",
        "type": "debug",
        "z": "4abea758808e56d0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 3080,
        "wires": []
    },
    {
        "id": "9f98a1ce0fe07b3e",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "set HUMIDITY_ON to true",
        "rules": [
            {
                "t": "set",
                "p": "HUMIDITY_ON",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ca2dd1046dede78b",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "set CO2_ON to false",
        "rules": [
            {
                "t": "set",
                "p": "CO2_ON",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 320,
        "wires": [
            [
                "a112c1321f7394ca"
            ]
        ]
    },
    {
        "id": "b58b16f52bf976ef",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "set CO2_ON to true",
        "rules": [
            {
                "t": "set",
                "p": "CO2_ON",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "44eb4d7df54d1880",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "set HUMIDITY_ON to false",
        "rules": [
            {
                "t": "set",
                "p": "HUMIDITY_ON",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 360,
        "wires": [
            [
                "6c6ac30170b8c47d"
            ]
        ]
    },
    {
        "id": "2574d57fcafe6b0e",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1140,
        "wires": []
    },
    {
        "id": "62df9bdc4e1e0168",
        "type": "function",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "calc vpd value",
        "func": "var air_T = global.get(\"temperature\");\n/* Assume leaf temp is 2 degrees F less */\nvar leaf_T = air_T - 2;\nvar RH = global.get(\"humidity\");\n\n/* see https://www.questclimate.com/vapor-pressure-deficit-indoor-growing-part-3-different-stages-vpd/ */\nleaf_vpd = 3.386*(Math.exp(17.863-9621/(leaf_T+460))-((RH/100)*Math.exp(17.863-9621/(air_T+460))));\nmsg.payload = Number(leaf_vpd.toFixed(2));\nmsg.topic = \"vpd\"\nflow.set(\"vpd\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "2574d57fcafe6b0e"
            ]
        ]
    },
    {
        "id": "6f7bc479bfbdfb4b",
        "type": "exec",
        "z": "b1f5580f.0b59c8",
        "command": "python3 /home/pi/read_moisture.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 520,
        "y": 560,
        "wires": [
            [
                "c69b40f1f64fd1fa"
            ],
            [],
            []
        ]
    },
    {
        "id": "f9e37d43ce07b13f",
        "type": "inject",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 560,
        "wires": [
            [
                "6f7bc479bfbdfb4b"
            ]
        ]
    },
    {
        "id": "c2828c279384a46b",
        "type": "debug",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 540,
        "wires": []
    },
    {
        "id": "c69b40f1f64fd1fa",
        "type": "function",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "func": "msg.payload = parseInt(msg.payload.slice(0, -1));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": [
            [
                "c2828c279384a46b"
            ]
        ]
    },
    {
        "id": "2da483a125a07165",
        "type": "rpi-gpio out",
        "z": "b1f5580f.0b59c8",
        "name": "Irrigation Pump",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "4e6df82419254877",
        "type": "inject",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "2da483a125a07165"
            ]
        ]
    },
    {
        "id": "1cf2d3013bebec72",
        "type": "inject",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "2da483a125a07165"
            ]
        ]
    },
    {
        "id": "7d98a870d540204c",
        "type": "exec",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "command": "python3 /home/pi/read_moisture.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 620,
        "y": 1940,
        "wires": [
            [
                "98915e32e0b597e9"
            ],
            [],
            []
        ]
    },
    {
        "id": "c9674f330c0d14bf",
        "type": "inject",
        "z": "4abea758808e56d0",
        "d": true,
        "g": "5cd41cd596d96214",
        "name": "check moisture every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 310,
        "y": 1940,
        "wires": [
            [
                "7d98a870d540204c"
            ]
        ]
    },
    {
        "id": "0154006cf7a6ce53",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1980,
        "wires": []
    },
    {
        "id": "98915e32e0b597e9",
        "type": "function",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "",
        "func": "msg.payload = parseInt(msg.payload.slice(0, -1));\n if (isNaN(msg.payload)) {\n     /* return a value that won't turn the pump on */\n     return null;\n }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1880,
        "wires": [
            [
                "07728359ffb6cb8c"
            ]
        ]
    },
    {
        "id": "7cacead955da0671",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "water?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "900",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 1920,
        "wires": [
            [
                "94a247bc3827cf77"
            ]
        ]
    },
    {
        "id": "94a247bc3827cf77",
        "type": "trigger",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "watering",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1280,
        "y": 1920,
        "wires": [
            [
                "3e873a2e43dd6886"
            ]
        ]
    },
    {
        "id": "3e873a2e43dd6886",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "Irrigation Pump",
        "pin": "22",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1480,
        "y": 1940,
        "wires": []
    },
    {
        "id": "2b80914edaddf792",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "name": "set CO2_ON and HUMIDITY_ON to TRUE",
        "rules": [
            {
                "t": "set",
                "p": "CO2_ON",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "HUMIDITY_ON",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "a9444ee17666272e",
        "type": "inject",
        "z": "8b70799ce97cf17d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 640,
        "wires": [
            [
                "2b80914edaddf792"
            ]
        ]
    },
    {
        "id": "07728359ffb6cb8c",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 870,
        "y": 1920,
        "wires": [
            [
                "741eb90c1f6ec67f"
            ]
        ]
    },
    {
        "id": "741eb90c1f6ec67f",
        "type": "smooth",
        "z": "4abea758808e56d0",
        "g": "5cd41cd596d96214",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 1000,
        "y": 1920,
        "wires": [
            [
                "7cacead955da0671",
                "0154006cf7a6ce53"
            ]
        ]
    },
    {
        "id": "b3071ab98a022411",
        "type": "exec",
        "z": "4abea758808e56d0",
        "command": "python3 /home/pi/read_moisture.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 580,
        "y": 2560,
        "wires": [
            [
                "a82a9f57ad979948"
            ],
            [],
            []
        ]
    },
    {
        "id": "c74ac89b3bbfe7ac",
        "type": "inject",
        "z": "4abea758808e56d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 2560,
        "wires": [
            [
                "b3071ab98a022411"
            ]
        ]
    },
    {
        "id": "d09ed7509995008a",
        "type": "debug",
        "z": "4abea758808e56d0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 2540,
        "wires": []
    },
    {
        "id": "cec1fe3ff77e6332",
        "type": "smooth",
        "z": "4abea758808e56d0",
        "name": "smooth moisture reading",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "0",
        "mult": "single",
        "reduce": false,
        "x": 1130,
        "y": 2540,
        "wires": [
            [
                "d09ed7509995008a"
            ]
        ]
    },
    {
        "id": "1e4a1fbc26ca9aec",
        "type": "switch",
        "z": "4abea758808e56d0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 2540,
        "wires": [
            [
                "cec1fe3ff77e6332"
            ]
        ]
    },
    {
        "id": "a82a9f57ad979948",
        "type": "function",
        "z": "4abea758808e56d0",
        "name": "",
        "func": "msg.payload = parseInt(msg.payload.slice(0, -1));\n if (isNaN(msg.payload)) {\n     /* return a value that won't turn the pump on */\n    return null;\n }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2540,
        "wires": [
            [
                "1e4a1fbc26ca9aec"
            ]
        ]
    },
    {
        "id": "93ca8f7778e3b6e7",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "Turn CO2 OFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 220,
        "wires": [
            [
                "a9643f1182d9505c"
            ]
        ]
    },
    {
        "id": "a9643f1182d9505c",
        "type": "rpi-gpio out",
        "z": "7f5b70e481620d6e",
        "name": "CO2 pin",
        "pin": "11",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1840,
        "y": 220,
        "wires": []
    },
    {
        "id": "789c646fef2264da",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "Turn humidifier off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1590,
        "y": 260,
        "wires": [
            [
                "13b1712706b4a090"
            ]
        ]
    },
    {
        "id": "13b1712706b4a090",
        "type": "rpi-gpio out",
        "z": "7f5b70e481620d6e",
        "name": "humidifier pin",
        "pin": "13",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1850,
        "y": 280,
        "wires": []
    },
    {
        "id": "45ba2da9f8f92240",
        "type": "switch",
        "z": "7f5b70e481620d6e",
        "name": "Send two emails",
        "property": "n_bad_readings",
        "propertyType": "flow",
        "rules": [
            {
                "t": "btwn",
                "v": "4",
                "vt": "num",
                "v2": "5",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1400,
        "y": 160,
        "wires": [
            [
                "65635cb9b4bd5851"
            ]
        ]
    },
    {
        "id": "8f979df0be509094",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "9dcaa677a0671838",
        "name": "not in maintanence?",
        "property": "maintanence",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 540,
        "y": 1200,
        "wires": [
            [
                "d7a7e9f0a6c51f63"
            ]
        ]
    },
    {
        "id": "1dacee984a866e2b",
        "type": "rpi-gpio out",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "irrigation pump",
        "pin": "22",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1140,
        "y": 440,
        "wires": []
    },
    {
        "id": "75250e59829d03b9",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "stop irrigation pump",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 440,
        "wires": [
            [
                "1dacee984a866e2b"
            ]
        ]
    },
    {
        "id": "68090ff36fa57771",
        "type": "switch",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "name": "Not in maintanence?",
        "property": "maintanence",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "5bb9031a4d037509",
                "2965aa8cc50c2bcd"
            ]
        ]
    },
    {
        "id": "fefc9e29f4c30c81",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "name": "global.maintanence is FALSE",
        "rules": [
            {
                "t": "set",
                "p": "maintanence",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "maintanence is FALSE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 720,
        "wires": [
            [
                "5278d77885b0adfd"
            ]
        ]
    },
    {
        "id": "556fa2d55ba86663",
        "type": "inject",
        "z": "8b70799ce97cf17d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 510,
        "y": 720,
        "wires": [
            [
                "fefc9e29f4c30c81"
            ]
        ]
    },
    {
        "id": "5278d77885b0adfd",
        "type": "debug",
        "z": "8b70799ce97cf17d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 720,
        "wires": []
    },
    {
        "id": "fd8fe70cf071e64e",
        "type": "inject",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "maintanence ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 240,
        "y": 860,
        "wires": [
            [
                "0816a5ae88264cbf"
            ]
        ]
    },
    {
        "id": "dc67024c11b7ddc3",
        "type": "inject",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "maintanence OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 240,
        "y": 940,
        "wires": [
            [
                "0816a5ae88264cbf"
            ]
        ]
    },
    {
        "id": "0816a5ae88264cbf",
        "type": "switch",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 900,
        "wires": [
            [
                "54fb67ba0ef3287b"
            ],
            [
                "53c4eac6e94ffc2d"
            ]
        ]
    },
    {
        "id": "54fb67ba0ef3287b",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "maintanence is TRUE",
        "rules": [
            {
                "t": "set",
                "p": "maintanence",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "maintanence is TRUE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 880,
        "wires": [
            [
                "e7eb39dee445d94c",
                "e7c53c6aa8f7bf22",
                "73e0adc899da21c8",
                "e65101b0861003d7"
            ]
        ]
    },
    {
        "id": "95cd08fdc45a781f",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "maintanence is FALSE",
        "rules": [
            {
                "t": "set",
                "p": "maintanence",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Maintanence is False",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1000,
        "wires": [
            [
                "e65101b0861003d7"
            ]
        ]
    },
    {
        "id": "e7eb39dee445d94c",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "Turn CO2 OFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 840,
        "wires": [
            [
                "917cb0c3bbbf7e80"
            ]
        ]
    },
    {
        "id": "917cb0c3bbbf7e80",
        "type": "rpi-gpio out",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "CO2 pin",
        "pin": "11",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "e7c53c6aa8f7bf22",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "Turn humidifier off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 880,
        "wires": [
            [
                "9e00cd6775f7eee4"
            ]
        ]
    },
    {
        "id": "9e00cd6775f7eee4",
        "type": "rpi-gpio out",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "humidifier pin",
        "pin": "13",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1200,
        "y": 900,
        "wires": []
    },
    {
        "id": "73e0adc899da21c8",
        "type": "delay",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "Wait 45 mins",
        "pauseType": "delay",
        "timeout": "45",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 890,
        "y": 920,
        "wires": [
            [
                "f3424efddcaac61d"
            ]
        ]
    },
    {
        "id": "f3424efddcaac61d",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "maintanence is FALSE",
        "rules": [
            {
                "t": "set",
                "p": "maintanence",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 960,
        "wires": [
            [
                "e65101b0861003d7"
            ]
        ]
    },
    {
        "id": "e65101b0861003d7",
        "type": "debug",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1000,
        "wires": []
    },
    {
        "id": "12607c4eea7517c5",
        "type": "influxdb out",
        "z": "8b70799ce97cf17d",
        "g": "5cd41cd596d96214",
        "influxdb": "bd52ceb7e193caff",
        "name": "write moisture readings",
        "measurement": "moisture_readings",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1190,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b09aa10eeec4a8ca",
        "type": "influxdb out",
        "z": "8b70799ce97cf17d",
        "influxdb": "bd52ceb7e193caff",
        "name": "write moisture readings",
        "measurement": "moisture_readings",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1370,
        "y": 2600,
        "wires": []
    },
    {
        "id": "08432c4ae4642529",
        "type": "influxdb out",
        "z": "8b70799ce97cf17d",
        "g": "5cd41cd596d96214",
        "influxdb": "bd52ceb7e193caff",
        "name": "write irrigation pump events",
        "measurement": "irrigation_pump_events",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1480,
        "y": 1880,
        "wires": []
    },
    {
        "id": "b35b36d37672e974",
        "type": "remote-access",
        "z": "8b70799ce97cf17d",
        "confignode": "01be24a515700cda",
        "name": "Node-Red access",
        "verbose": true,
        "x": 670,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "b01650a105e9d838",
        "type": "e-mail",
        "z": "8b70799ce97cf17d",
        "g": "ba872fe6adc0f262",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "happyday.mjohnson@gmail.com",
        "dname": "send email LED ON/OFF change",
        "x": 860,
        "y": 500,
        "wires": []
    },
    {
        "id": "0bbe8b5a93d701f9",
        "type": "e-mail",
        "z": "8b70799ce97cf17d",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "happyday.mjohnson@gmail.com",
        "dname": "send email ",
        "x": 1750,
        "y": 80,
        "wires": []
    },
    {
        "id": "618e2203d8fce6fa",
        "type": "config",
        "z": "8b70799ce97cf17d",
        "name": "start parameters",
        "properties": [
            {
                "p": "maintanence",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "p": "sensor_working",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "active": true,
        "x": 240,
        "y": 140,
        "wires": []
    },
    {
        "id": "4da3ba0ace62a98e",
        "type": "read-measurement",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "scd30Config": "1ea5dfa03b11893e",
        "name": "scd30",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "0afb20ee3d565630"
            ]
        ]
    },
    {
        "id": "11e485116eee57f2",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "temperature",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.temperature",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 220,
        "wires": [
            [
                "1719f5a5a4164309"
            ]
        ]
    },
    {
        "id": "109fb15ca23f61de",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "set global temperature",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 200,
        "wires": [
            [
                "ff1491759ab107b3"
            ]
        ]
    },
    {
        "id": "dfcd0478bf2416e5",
        "type": "inject",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "Readings taken every 3 secs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "4da3ba0ace62a98e"
            ]
        ]
    },
    {
        "id": "73e9b65f7062e826",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "CO2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.co2Concentration",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 340,
        "wires": [
            [
                "a1296ba7044ee47f"
            ]
        ]
    },
    {
        "id": "84278bf54d79cd76",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "humidity",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.relativeHumidity",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 280,
        "wires": [
            [
                "0673833916e00a97"
            ]
        ]
    },
    {
        "id": "ff1491759ab107b3",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 180,
        "wires": []
    },
    {
        "id": "35ae8f14df4e6a62",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "set global CO2",
        "rules": [
            {
                "t": "set",
                "p": "CO2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 340,
        "wires": [
            [
                "7369975ab5993df5"
            ]
        ]
    },
    {
        "id": "d66cdba9a473ecf7",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "set global humidity",
        "rules": [
            {
                "t": "set",
                "p": "humidity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 280,
        "wires": [
            [
                "32c200af72af8230"
            ]
        ]
    },
    {
        "id": "7369975ab5993df5",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 340,
        "wires": []
    },
    {
        "id": "32c200af72af8230",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 240,
        "wires": []
    },
    {
        "id": "1719f5a5a4164309",
        "type": "smooth",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 1140,
        "y": 220,
        "wires": [
            [
                "109fb15ca23f61de"
            ]
        ]
    },
    {
        "id": "0673833916e00a97",
        "type": "smooth",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 1120,
        "y": 280,
        "wires": [
            [
                "d66cdba9a473ecf7"
            ]
        ]
    },
    {
        "id": "a1296ba7044ee47f",
        "type": "smooth",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "35ae8f14df4e6a62"
            ]
        ]
    },
    {
        "id": "0afb20ee3d565630",
        "type": "subflow:7f5b70e481620d6e",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "env": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "11e485116eee57f2",
                "84278bf54d79cd76",
                "73e9b65f7062e826"
            ]
        ]
    },
    {
        "id": "a0ea1b32b045e152",
        "type": "config",
        "z": "7f5b70e481620d6e",
        "name": "State Variables",
        "properties": [
            {
                "p": "n_bad_readings",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "active": true,
        "x": 460,
        "y": 40,
        "wires": []
    },
    {
        "id": "c7346908f1b206fd",
        "type": "switch",
        "z": "4abea758808e56d0",
        "name": "is it time to turn off pump?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 1640,
        "wires": [
            [
                "d7a3d049e0ab1f76"
            ]
        ]
    },
    {
        "id": "ca7d3bea02a4d718",
        "type": "switch",
        "z": "4abea758808e56d0",
        "name": "not enough water?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "4c9a85565651c62d"
            ]
        ]
    },
    {
        "id": "9961654f03ef6c55",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "name": "humidifier pump",
        "pin": "15",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 980,
        "y": 1640,
        "wires": []
    },
    {
        "id": "9164759796c0c04d",
        "type": "inject",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "Readings every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 290,
        "y": 620,
        "wires": [
            [
                "43659c9345caee48"
            ]
        ]
    },
    {
        "id": "962ae9ccf9e5902f",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 620,
        "wires": []
    },
    {
        "id": "f9a42940ed8f69d9",
        "type": "join",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "962ae9ccf9e5902f",
                "e1377f3696e0121c"
            ]
        ]
    },
    {
        "id": "421f54339678b2ae",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "send temperature value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "temperature",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 620,
        "wires": [
            [
                "f9a42940ed8f69d9"
            ]
        ]
    },
    {
        "id": "dd3f8b083243cab6",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "send CO2 value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CO2",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CO2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 660,
        "wires": [
            [
                "f9a42940ed8f69d9"
            ]
        ]
    },
    {
        "id": "5f7d5c4c5e33be7b",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "send humidity value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "humidity",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "humidity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 700,
        "wires": [
            [
                "f9a42940ed8f69d9"
            ]
        ]
    },
    {
        "id": "43659c9345caee48",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "is sensor working?",
        "property": "sensor_working",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 620,
        "wires": [
            [
                "421f54339678b2ae",
                "dd3f8b083243cab6",
                "5f7d5c4c5e33be7b",
                "59b3a26f8c0ff142"
            ]
        ]
    },
    {
        "id": "59b3a26f8c0ff142",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "name": "send vpd value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "vpd",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "vpd",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 740,
        "wires": [
            [
                "f9a42940ed8f69d9"
            ]
        ]
    },
    {
        "id": "73be6328320e4c12",
        "type": "rpi-gpio in",
        "z": "4abea758808e56d0",
        "name": "Low Water",
        "pin": "16",
        "intype": "tri",
        "debounce": "25",
        "read": true,
        "x": 340,
        "y": 1600,
        "wires": [
            [
                "ca7d3bea02a4d718"
            ]
        ]
    },
    {
        "id": "ff710d76c3213cd1",
        "type": "change",
        "z": "4abea758808e56d0",
        "name": "msg: turning pump on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "turning humidifier pump on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1560,
        "wires": [
            [
                "720a5600600d61be"
            ]
        ]
    },
    {
        "id": "5b9b29bceb507b51",
        "type": "rpi-gpio in",
        "z": "4abea758808e56d0",
        "name": "High Water",
        "pin": "18",
        "intype": "tri",
        "debounce": "25",
        "read": true,
        "x": 340,
        "y": 1640,
        "wires": [
            [
                "c7346908f1b206fd"
            ]
        ]
    },
    {
        "id": "64115e9d5619b075",
        "type": "change",
        "z": "4abea758808e56d0",
        "name": "msg: turning pump off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "turning humidifier pump off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1680,
        "wires": [
            [
                "720a5600600d61be"
            ]
        ]
    },
    {
        "id": "4c9a85565651c62d",
        "type": "change",
        "z": "4abea758808e56d0",
        "name": "Start pump",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1600,
        "wires": [
            [
                "78f80acdafcfdeae",
                "ff710d76c3213cd1"
            ]
        ]
    },
    {
        "id": "d7a3d049e0ab1f76",
        "type": "change",
        "z": "4abea758808e56d0",
        "name": "Stop pump",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1640,
        "wires": [
            [
                "78f80acdafcfdeae",
                "64115e9d5619b075",
                "9961654f03ef6c55"
            ]
        ]
    },
    {
        "id": "720a5600600d61be",
        "type": "debug",
        "z": "4abea758808e56d0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 1620,
        "wires": []
    },
    {
        "id": "78f80acdafcfdeae",
        "type": "influxdb out",
        "z": "4abea758808e56d0",
        "influxdb": "bd52ceb7e193caff",
        "name": "write humidifier pump events",
        "measurement": "pump_events",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1020,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e1377f3696e0121c",
        "type": "influxdb out",
        "z": "4abea758808e56d0",
        "g": "11670cc3ba018b59",
        "influxdb": "bd52ceb7e193caff",
        "name": "",
        "measurement": "readings",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1200,
        "y": 680,
        "wires": []
    },
    {
        "id": "fb6c0442264fd0df",
        "type": "comment",
        "z": "4abea758808e56d0",
        "name": "Explanation of non-contact water sensors",
        "info": "There are two non-contact water sensors \"stuck\" to the side of the homemade humidifier container.  The high water sensor is 0 when the water has filled to the high water mark.  The low water sensor is 0 when there is enough water.  When the low water sensor switches to 1, it means it can't detect water, so the container needs more water until the high water sensor switches to 0 (i.e.: detects water at the high water level mark).",
        "x": 970,
        "y": 2720,
        "wires": []
    },
    {
        "id": "fcfc7757c8cfc1d4",
        "type": "trigger",
        "z": "4abea758808e56d0",
        "name": "humidifier pump on for 5 seconds",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 860,
        "y": 1780,
        "wires": [
            [
                "53be8348ec69d20e"
            ]
        ]
    },
    {
        "id": "af4d68ac754480a4",
        "type": "inject",
        "z": "4abea758808e56d0",
        "name": "Test Humidifier pump",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 560,
        "y": 1780,
        "wires": [
            [
                "fcfc7757c8cfc1d4"
            ]
        ]
    },
    {
        "id": "53be8348ec69d20e",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "name": "humidifier pump",
        "pin": "15",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1160,
        "y": 1780,
        "wires": []
    },
    {
        "id": "9978ede32cec6124",
        "type": "function",
        "z": "eb89d693b7773219",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "949923bd437d2864"
            ]
        ]
    },
    {
        "id": "526b77a2f47ac224",
        "type": "inject",
        "z": "eb89d693b7773219",
        "name": "Inject -0.2 at start",
        "props": [
            {
                "p": "payload",
                "v": "-0.2",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "11128d0521cfb4a6"
            ]
        ]
    },
    {
        "id": "1a4571df28707e55",
        "type": "function",
        "z": "eb89d693b7773219",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "9978ede32cec6124"
            ]
        ]
    },
    {
        "id": "11128d0521cfb4a6",
        "type": "delay",
        "z": "eb89d693b7773219",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "8482a1f90ad4de2e"
            ]
        ]
    },
    {
        "id": "3ced50e99c6bee7c",
        "type": "function",
        "z": "eb89d693b7773219",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "1a4571df28707e55"
            ]
        ]
    },
    {
        "id": "949923bd437d2864",
        "type": "function",
        "z": "eb89d693b7773219",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "8482a1f90ad4de2e",
        "type": "range",
        "z": "eb89d693b7773219",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "3ced50e99c6bee7c"
            ]
        ]
    },
    {
        "id": "4e6ebeee7ef922c2",
        "type": "function",
        "z": "b1f5580f.0b59c8",
        "name": "Adjust CO2 level",
        "func": "current_CO2 = global.get(\"CO2\");\nsetpoint_CO2 = flow.get(\"setpoint_CO2\")\nerror = setpoint_CO2 = current_CO2\nerror_percent = flow.get(\"error_percent\")\ntime_CO2_on = flow.get(\"min_CO2_on\")*error_percent*error\ntime_CO2_on= time_CO2_on - time_CO2_on % 1;\nmsg.payload = time_CO2_on + \" = time co2 is on\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "d7add8697e5e472f"
            ]
        ]
    },
    {
        "id": "d7add8697e5e472f",
        "type": "debug",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 180,
        "wires": []
    },
    {
        "id": "1372e9622e79503b",
        "type": "inject",
        "z": "b1f5580f.0b59c8",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 770,
        "y": 180,
        "wires": [
            [
                "4e6ebeee7ef922c2"
            ]
        ]
    },
    {
        "id": "0311c634411a4bf7",
        "type": "change",
        "z": "b1f5580f.0b59c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "53c4eac6e94ffc2d",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "set HUMIDITY_ON to true",
        "rules": [
            {
                "t": "set",
                "p": "HUMIDITY_ON",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 940,
        "wires": [
            [
                "da0b31bae02beb36"
            ]
        ]
    },
    {
        "id": "da0b31bae02beb36",
        "type": "change",
        "z": "8b70799ce97cf17d",
        "g": "c46e0f1aa3ade45f",
        "name": "set CO2_ON to true",
        "rules": [
            {
                "t": "set",
                "p": "CO2_ON",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "95cd08fdc45a781f"
            ]
        ]
    },
    {
        "id": "a281ccd7b48cfc28",
        "type": "catch",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "",
        "scope": [
            "4da3ba0ace62a98e"
        ],
        "uncaught": false,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "c5403bf55494f94b"
            ]
        ]
    },
    {
        "id": "2bd6810d.e22ece",
        "type": "catch",
        "z": "d9bacc2cf62aebc4",
        "name": "",
        "scope": [
            "2c94a22c.91012e"
        ],
        "uncaught": false,
        "x": 530,
        "y": 320,
        "wires": [
            [
                "d16b9fac.8212a"
            ]
        ]
    },
    {
        "id": "2c94a22c.91012e",
        "type": "function",
        "z": "d9bacc2cf62aebc4",
        "name": "Throw Error",
        "func": "node.error(\"an example error\", msg);   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d16b9fac.8212a",
        "type": "debug",
        "z": "d9bacc2cf62aebc4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "c5ee9670.5dbbd8",
        "type": "inject",
        "z": "d9bacc2cf62aebc4",
        "name": "Trigger error",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "2c94a22c.91012e"
            ]
        ]
    },
    {
        "id": "c5403bf55494f94b",
        "type": "change",
        "z": "4abea758808e56d0",
        "g": "c1f9dd9005199070",
        "name": "set payload to error source type",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.source.type",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "0afb20ee3d565630"
            ]
        ]
    },
    {
        "id": "9d999439c54af0da",
        "type": "config",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "\"PID\" settings",
        "properties": [
            {
                "p": "setpoint_CO2",
                "pt": "flow",
                "to": "1200",
                "tot": "num"
            },
            {
                "p": "min_CO2_on",
                "pt": "flow",
                "to": "5",
                "tot": "num"
            },
            {
                "p": "Kp",
                "pt": "flow",
                "to": ".01",
                "tot": "num"
            },
            {
                "p": "cum_error",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "p": "Ki",
                "pt": "flow",
                "to": ".004",
                "tot": "str"
            },
            {
                "p": "last_error",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "p": "Kd",
                "pt": "flow",
                "to": ".05",
                "tot": "num"
            }
        ],
        "active": true,
        "x": 960,
        "y": 860,
        "wires": []
    },
    {
        "id": "d23cb0ed0c018915",
        "type": "inject",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "check CO2 level every 30 seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 370,
        "y": 900,
        "wires": [
            [
                "2b15c635124ac3e4"
            ]
        ]
    },
    {
        "id": "8115cdb33c2eb383",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "within time for CO2 to be on?",
        "property": "CO2_ON",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 960,
        "wires": [
            [
                "8ea7ca419625113b"
            ]
        ]
    },
    {
        "id": "09a1997cf283f87c",
        "type": "rpi-gpio out",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "CO2 pin",
        "pin": "11",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 1520,
        "y": 980,
        "wires": []
    },
    {
        "id": "4a7db3adf19b8993",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "is sensor working?",
        "property": "sensor_working",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 960,
        "wires": [
            [
                "8115cdb33c2eb383"
            ]
        ]
    },
    {
        "id": "2b15c635124ac3e4",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "not in maintanence?",
        "property": "maintanence",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 960,
        "wires": [
            [
                "4a7db3adf19b8993"
            ]
        ]
    },
    {
        "id": "8ea7ca419625113b",
        "type": "function",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "Set ms to turn CO2 solenoid on",
        "func": "current_CO2 = global.get(\"CO2\");\nsetpoint_CO2 = flow.get(\"setpoint_CO2\");\n// Calculate the error term\nerror = setpoint_CO2 - current_CO2;\n// Calculate the Proportional Correction\nKp = flow.get(\"Kp\");\npCorrection = flow.get(\"min_CO2_on\")*Kp*error;\npCorrection = pCorrection - pCorrection % 1;\n// Calculate the Integral Correction\ncum_error = flow.get(\"cum_error\")+error;\nflow.set(\"cum_error\",cum_error);\niCorrection = (cum_error*flow.get(\"Ki\"));\niCorrection = iCorrection - iCorrection % 1;\n// Calculate the Derivative Correction\nlast_error = flow.get(\"last_error\");\nslope = error - last_error;\ndCorrection = slope*flow.get(\"Kd\");\ndCorrection = dCorrection - dCorrection % 1;\nflow.set(\"last_error\",error);\n// Calculate the # Seconds to turn CO2 on\nnum_CO2_seconds = pCorrection + iCorrection + dCorrection;\n// Clamp the Correction to not exceed a maximum \nmax_CO2_seconds = 20;\nmin_CO2_seconds = 0;\nif (num_CO2_seconds > max_CO2_seconds){\n    num_CO2_seconds = max_CO2_seconds;\n}else if (num_CO2_seconds < min_CO2_seconds) {\n    num_CO2_seconds = min_CO2_seconds;\n}\n    \n\nnode.warn(\"current CO2 = \" + current_CO2 + \" Error: = \"+ error);\nnode.warn(\"**>> pCorrection is \"+pCorrection+\" iCorrection is \"+iCorrection);\nnode.warn(\"******** dCorrection is \"+dCorrection);\nnode.warn(\"**** slope is \" + slope);\nnode.warn(\"**** Num CO2 seconds is \"+num_CO2_seconds);\nmsg.delay = num_CO2_seconds*1000 ;\nmsg.payload = msg.delay;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 960,
        "wires": [
            [
                "0a3f95f85eb5341a"
            ]
        ],
        "info": "# Why This code?\nBesides light and water, CO2 is a major input into the photosynthetic process.  I want to maintain a level of CO2 that will improve the photosynthetic process.  The CO2 I use resides in a cannister and is released by using a solenoid.  My original effort used a very simple ON when the measured CO2 was below a minimum then OFF when the CO2 reached above a maximum.  The amount of oscillation was significant.  So I learned about PID controllers.\n# What Hampered Learning About PID Controllers\nMy working conceptual model assumed PID controllers were only effective if the output was continous/analog.  I was thinking of PID controllers for cruise control or for temperature adjustment.  It completely alluded me that turning on and off a solenoid based on PID input could work...and then [a kind person on Reddit set me on a path to use PID control using a solenoid to control the output](https://www.reddit.com/r/Homebrewing/comments/q84l0a/diy_co2_flow_regulator_via_pid_not_sure_about/hgop0il/?context=3).\n\n## From regreddit\n\n_Hydroponic software controls developer here. You don't need to control flow from the Pi, you need to control the duty cycle of the solenoid. Set the flow rate to something fixed like 10 lpm, then control the solenoid based on the % error of your CO2 ppm setpoint. To do this, you have to also know the CO2 ppm of your grow room, and feed that data to the pi. From there, calculate how far off you are from the ppm setpoint. Let's used a simple example using round numbers: Your desired ppm is 1500. That's called your Setpoint (SP) Your current ppm is 1000. This is called your Process Value (PV). The difference between them is called your Process Error (PE) SP-PV=PE. Your PE is 500, and we want to get to 1500 without overshooting SP. To do that, let's choose a flow duty cycle of say 5 seconds, and a sample duty cycle of 60 seconds. Every 60 seconds, read the CO2, and calculate PE. Open the solenoid 5 x some % of PE. Let's call it 1% . So 1% of 500 is 5. So 5 (duty cycle) * 5 (PE) = 25. Open your solenoid for 25 seconds, then wait until your next cycle and do it again. Next time, your PE is only 300, so 3001%= 3. 35 =15 seconds. Next cycle, PE is 250, so 5*2.5 12.5, etc. As your PE drops, your P in the PID algorithm drops lower and lower. Your I in the PID loop is just the fixed duty cycle. You'll never open the solenoid for less than 5 secs, ensuring the you'll eventually hit your SP. You don't need D in this style of control.)_\n\n\n# Best Resource for Learning About PID Controllers"
    },
    {
        "id": "5c0c596782767209",
        "type": "trigger",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "Turn CO2 on/off",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "250",
        "extend": false,
        "overrideDelay": true,
        "units": "hr",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1340,
        "y": 940,
        "wires": [
            [
                "09a1997cf283f87c",
                "9db1913821a3e731"
            ]
        ]
    },
    {
        "id": "9db1913821a3e731",
        "type": "debug",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 900,
        "wires": []
    },
    {
        "id": "0a3f95f85eb5341a",
        "type": "switch",
        "z": "4abea758808e56d0",
        "g": "2aaa68f68d8fd77c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1190,
        "y": 960,
        "wires": [
            [
                "5c0c596782767209"
            ]
        ]
    },
    {
        "id": "163335db1cb8164e",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "change temp from C to F",
        "rules": [
            {
                "t": "set",
                "p": "payload.temperature",
                "pt": "msg",
                "to": "msg.payload.temperature*9/5 + 32 ",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "34247234f0668477"
            ]
        ]
    }
]